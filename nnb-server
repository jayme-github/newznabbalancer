#!/usr/bin/env python

import os
import logging
from optparse import OptionParser

# Defaults
PORT = 8000
FAKEKEY = 'THISISAFAKEAPIKEYUSEDTOIDENTIFYMEATMYPROXY'
DBNAME = 'newznabbalancer.sqlite3'
LOGNAME = 'newznabbalancer.log'
LOGFORMAT = '%(asctime)s - %(threadName)s - %(levelname)s - %(message)s'

# Setup logging
# Create a new debug level that always passes filter
# to log status messages (loggin.Logger.status is taken)
# like httpd request lines etc.
VERBOSE_LEVEL_NUM = 51
logging.addLevelName(VERBOSE_LEVEL_NUM, "VERBOSE")
def verbose(self, message, *args, **kws):
    # Yes, logger takes its '*args' as 'args'.
    if self.isEnabledFor(VERBOSE_LEVEL_NUM):
        self._log(VERBOSE_LEVEL_NUM, message, args, **kws) 
logging.Logger.verbose = verbose
logger = logging.getLogger('newznabbalancer')

if __name__ == '__main__':
    description = 'Simple webserver to balance Newznab API requests over several indexers.'
    parser = OptionParser(version=0.1, description=description)
    parser.add_option('-p', '--port', action='store', dest='port',
            type='int', default=PORT, help='TCP port to bind to [default: %default]')
    parser.add_option('-l', '--list-accounts', action='store_true', dest='listaccounts',
            default=False, help='List accounts in database')
    parser.add_option('-f', '--list-fallbacks', action='store_true', dest='listfallbacks',
            default=False, help='List fallbacks of the last 24 hours')
    parser.add_option('-a', '--add-account', action='store_true', dest='addaccount',
            default=False, help='Add a new account [-a <APIKEY> <URL> <3rd paramater if fallback>]')
    parser.add_option('-d', '--debug', action='store_true', dest='_debug', help='debugging output')
    parser.add_option('--data-dir', action='store', dest='datadir', type='string',
            default='/var/newznabbalancer', help='Data directory where %s and logs are stored' %(DBNAME,))
    parser.add_option('--fake-key', action='store', dest='fakekey', type='string',
            default=FAKEKEY, help='The fake API key you use within your Newznab clients [default: %default]')
    (options, args) = parser.parse_args()

    if os.path.isdir(options.datadir):
        logpath = os.path.join(options.datadir, LOGNAME)
    else:
        logpath = LOGNAME
    logging.basicConfig(format=LOGFORMAT,
                        filename=logpath, level=logging.WARNING)
    if options._debug:
        logger.setLevel(logging.DEBUG)
        logger.debug('Running in debug mode')

    dbpath = os.path.join(options.datadir, DBNAME)
    if not os.path.isfile(dbpath) and os.path.isfile(DBNAME):
        dbpath = DBNAME

    if options.listaccounts or options.listfallbacks or options.addaccount:
        from newznabbalancer.database import AccountDB
        # database stuff
        db = AccountDB(dbpath)
        if options.listaccounts:
            accounts = db.get_all_accounts()
            print('%d accounts' % len(accounts))
            for account in accounts:
                print(account)
        if options.listfallbacks:
            fallbacks = db.get_last_fallbacks()
            print('%d fallbacks' % len(fallbacks))
            for fallback in fallbacks:
                print(fallback)
        if options.addaccount:
            if len(args) == 3:
                db.add_account(args[0], args[1], True)
                print('Added apikey "%s" with URL "%s" as fallback' % (args[0], args[1]))
            elif len(args) == 2:
                db.add_account(args[0], args[1])
                print('Added apikey "%s" with URL "%s"' % (args[0], args[1]))
            else:
                parser.error('Need at least two arguments (API key and API URL!\nAdd a third parameter if you want to add the account as fallback.\n -a <apikey> <url> <shouldbefallbackyo>')
    else:
        from newznabbalancer.server import NewznabBalancer
        nnb = NewznabBalancer('localhost', options.port, dbpath, options.fakekey)
        try:
            nnb.start()
        except KeyboardInterrupt:
            nnb.stop()
